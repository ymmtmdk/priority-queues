See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 6 warnings)
API:          PASSED

Findbugs:     FAILED (7 warnings)
Checkstyle:   FAILED (158 warnings)

Correctness:  30/42 tests passed
Memory:       11/11 tests passed
Timing:       12/17 tests passed

Aggregate score: 71.97%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 12K May 30 08:39 Board.java
7.7K May 30 08:39 Solver.java


********************************************************************************
*  COMPILING
********************************************************************************


% javac Board.java
*-----------------------------------------------------------
Board.java:393: warning: [rawtypes] found raw type: Deque
    Deque q = new ArrayDeque<Board>();
    ^
  missing type arguments for generic class Deque<E>
  where E is a type-variable:
    E extends Object declared in interface Deque
Board.java:395: warning: [unchecked] unchecked call to add(E) as a member of the raw type Deque
      q.add(neighbor(Dir.UP));
           ^
  where E is a type-variable:
    E extends Object declared in interface Deque
Board.java:398: warning: [unchecked] unchecked call to add(E) as a member of the raw type Deque
      q.add(neighbor(Dir.DOWN));
           ^
  where E is a type-variable:
    E extends Object declared in interface Deque
Board.java:401: warning: [unchecked] unchecked call to add(E) as a member of the raw type Deque
      q.add(neighbor(Dir.LEFT));
           ^
  where E is a type-variable:
    E extends Object declared in interface Deque
Board.java:404: warning: [unchecked] unchecked call to add(E) as a member of the raw type Deque
      q.add(neighbor(Dir.RIGHT));
           ^
  where E is a type-variable:
    E extends Object declared in interface Deque
Board.java:406: warning: [unchecked] unchecked conversion
    return q;
           ^
  required: Iterable<Board>
  found:    Deque
6 warnings

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L M LI_LAZY_INIT_STATIC LI: Incorrect lazy initialization of static field Board.blocksCache in Board.newBoard(Board$Blocks, int, int, int, int, int, boolean, long)  At Board.java:[lines 62-63]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'println()' is never called.  At Board.java:[lines 217-218]
M B NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT NP: The 'equals()' method does not return 'false' if the argument is null.  At Solver.java:[lines 179-181]
M B BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS BC: The 'equals()' method for 'Solver$BoardNode' assumes the argument is of type 'Solver$BoardNode'; it should be of type 'java.lang.Object'.  At Solver.java:[line 180]
M B HE_EQUALS_USE_HASHCODE HE: The class overrides 'equals()' but not 'hashCode()'. As a result, 'Solver$BoardNode' will not work with 'java.util.HashMap' or 'java.util.HashSet'.  At Solver.java:[lines 179-181]
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At Solver.java:[line 147]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'println()' is never called.  At Solver.java:[lines 131-132]
Warnings generated: 7

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Board.java:1: Do not use .* in import statements. [AvoidStarImport]
Board.java:2: Do not use .* in import statements. [AvoidStarImport]
Board.java:5:23: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:7:5: Declare static and instance variables in order of their access modifiers: public, protected, package, and private. [DeclarationOrder]
Board.java:7:15: The instance (or static) variable 'dimension' must be private. [VisibilityModifier]
Board.java:9:27: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:14:41: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:19:30: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:23:38: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:24:41: Typecast is not followed by whitespace. [WhitespaceAfter]
Board.java:27:25: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
Board.java:27:32: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:29:48: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:30:50: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:31:41: Typecast is not followed by whitespace. [WhitespaceAfter]
Board.java:38:24: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
Board.java:38:31: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:40:46: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:47:18: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:52:19: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:59:3: Declare static variables before instance variables, constructors, and methods. [DeclarationOrder]
Board.java:61: Line is longer than 128 characters (currently 153). [LineLength]
Board.java:61:24: More than 7 parameters (found 8). [ParameterNumber]
Board.java:61:153: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:62:29: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:65:43: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:74:34: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:81:26: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:83:53: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:84:55: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:91:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:134:28: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:136:9: The local (or parameter) variable 'dimension' has the same name as an instance variable. Use a different name. [HiddenField]
Board.java:137:46: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:138:48: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:140:20: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:162:3: Define constructors after static and instance variables but before methods. [DeclarationOrder]
Board.java:174: Line is longer than 128 characters (currently 137). [LineLength]
Board.java:174:3: Define constructors after static and instance variables but before methods. [DeclarationOrder]
...
 Checkstyle ends with 158 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: Test manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: Test dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
==> passed

Test 4a: Test toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: Test toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: Test neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - neighbor not found by student:
        [suppressed]

  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 5b: Test neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
    - neighbor not found by student:
        9
        65 50 70 10 76 61  7 25 40
        15 12 52 78 53 11 38 66 74
        19 72 42 48  3  9 35  5 46
         1 17  4 68 67 63 71 54 23
        39 28 44 36 45 55  2 34 16
        56 62 14 75 21 69 18  6 43
        41 79 26 32 37 20 64 31 49
        22 73 13 59 27 57 30 33 29
        60 47  0 58 51 24 77 80  8

    - failed on trial 9 of 1000

  * 10-by-10
    - neighbor not found by student:
        [suppressed]

    - failed on trial 4 of 1000

  * 127-by-127
    - neighbor not found by student:
        [suppressed]

    - failed on trial 1 of 10

==> FAILED

Test 6a: Test neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: 10
 1  2  3  4  5  6  7  8  9 10
11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
31 32 33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48 49 50
51 52 53 54 55 56 57 58 59 60
61 62 63 64 65 66 67 68 69 70
71 72 73 74 75 76 77 78 79 80
81 82 83 84 85 86 87 88 89  0
91 92 93 94 95 96 97 98 99 90

    - 6 missing entries in student solution, including: 10
 1  2  3  4  5  6  7  8  9 10
11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30
31 32 33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48 49 50
51 52 53 54 55 56 57 58 59 60
61 62 63 64 65 66 67 68 69 70
71 72 73 74 75 76 77 78 79 80
81 82 83 84 85 86 87 88 89 90
91 92 93 94 95 96 97 98 99  0


  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 6b: Test neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
    - student   solution has 8 non-null entries
    - reference solution has 8 non-null entries
    - 1 extra entry in student solution: 3
 7  3  6
 1  0  8
 5  4  2

    - 1 missing entry in student solution: 3
 3  8  1
 7  5  0
 6  4  2


    - failed on trial 30 of 1000

  * 4-by-4
  * 5-by-5
  * 9-by-9
    - incorrect number of neighbors of neighbors
    - student   neighbors = 13
    - reference neighbors = 14
    - board
        9
        22 55 58 39 40 70 63 57 42
        28 74 31 11 34  6 65 62  2
        79 76 47 35 19 45 44 12 72
        80 41 24 18 37 33 64 71  8
        52  7 10 50 77 61  3 27 14
        56  5 26 49 30 36 17 51 66
        15 60 54 21 46 53 67 68 59
        29  0 32 13 43 20  9 25 69
        38 16  1 75 48  4 78 23 73

    - failed on trial 1 of 1000

  * 10-by-10
    - incorrect number of neighbors of neighbors
    - student   neighbors = 12
    - reference neighbors = 10
    - board
        10
        92 76 14 12  4 68 36 16 39 35
        65 98 41 57 51 54 56 15 40 24
        52 87 86 29 42 53 55 19  5 50
        18 26  9 20 44 48 79 85  2 31
        70 38 64 74 94 49 47 59  1 21
        83 99 22 96 62 25 81  8 72 61
        27 34 69 63 10 88 67 60 33 11
        73 97 37 80 91 95 77 17 93 75
        13  7 32  3 46 82 71 90 89 66
         6 30 43  0 28 58 84 23 45 78

    - failed on trial 1 of 1000

==> FAILED

Test 7a: Test twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
    - twin() doesn't return a twin
        2
         3  2
         0  1

==> FAILED

Test 7b: Test twin() with random n-by-n boards
  * 2-by-2
    - twin() doesn't return a twin
        2
         2  3
         0  1

    - failed on trial 2 of 1000

  * 3-by-3
    - twin() doesn't return a twin
        3
         5  0  8
         2  3  7
         4  1  6

    - failed on trial 1 of 1000

  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> FAILED

Test 8a: Test isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  * reflexive
  * symmetric
  * checks that individual entries of array are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: Test equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 16/22 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2: Call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testMoves(TestSolver.java:152)
    TestSolver.testMoves(TestSolver.java:111)
    TestSolver.test5(TestSolver.java:440)
    TestSolver.main(TestSolver.java:985)

  * puzzle2x2-unsolvable2.txt
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testMoves(TestSolver.java:152)
    TestSolver.testMoves(TestSolver.java:111)
    TestSolver.test5(TestSolver.java:441)
    TestSolver.main(TestSolver.java:985)

  * puzzle3x3-unsolvable1.txt
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testMoves(TestSolver.java:152)
    TestSolver.testMoves(TestSolver.java:111)
    TestSolver.test5(TestSolver.java:442)
    TestSolver.main(TestSolver.java:985)

  * puzzle3x3-unsolvable2.txt
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testMoves(TestSolver.java:152)
    TestSolver.testMoves(TestSolver.java:111)
    TestSolver.test5(TestSolver.java:443)
    TestSolver.main(TestSolver.java:985)

  * puzzle4x4-unsolvable.txt
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testMoves(TestSolver.java:152)
    TestSolver.testMoves(TestSolver.java:111)
    TestSolver.test5(TestSolver.java:444)
    TestSolver.main(TestSolver.java:985)

==> FAILED

Test 6: Call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testUnsolvableSolution(TestSolver.java:286)
    TestSolver.test6(TestSolver.java:453)
    TestSolver.main(TestSolver.java:988)

  * puzzle2x2-unsolvable2.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testUnsolvableSolution(TestSolver.java:286)
    TestSolver.test6(TestSolver.java:454)
    TestSolver.main(TestSolver.java:988)

  * puzzle3x3-unsolvable1.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testUnsolvableSolution(TestSolver.java:286)
    TestSolver.test6(TestSolver.java:455)
    TestSolver.main(TestSolver.java:988)

  * puzzle3x3-unsolvable2.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testUnsolvableSolution(TestSolver.java:286)
    TestSolver.test6(TestSolver.java:456)
    TestSolver.main(TestSolver.java:988)

  * puzzle4x4-unsolvable.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testUnsolvableSolution(TestSolver.java:286)
    TestSolver.test6(TestSolver.java:457)
    TestSolver.main(TestSolver.java:988)

==> FAILED

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testImmutableSolver(TestSolver.java:512)
    TestSolver.testImmutableSolver(TestSolver.java:601)
    TestSolver.test7b(TestSolver.java:621)
    TestSolver.main(TestSolver.java:994)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle3x3-unsolvable2.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testImmutableSolver(TestSolver.java:512)
    TestSolver.testImmutableSolver(TestSolver.java:601)
    TestSolver.test7b(TestSolver.java:622)
    TestSolver.main(TestSolver.java:994)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.solution()
  * puzzle4x4-unsolvable.txt
    java.lang.NullPointerException

    Solver.solution(Solver.java:235)
    TestSolver.testImmutableSolver(TestSolver.java:512)
    TestSolver.testImmutableSolver(TestSolver.java:601)
    TestSolver.test7b(TestSolver.java:623)
    TestSolver.main(TestSolver.java:994)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.isSolvable() -> false
          solver.solution()
  * random 2-by-2 unsolvable boards
    java.lang.NullPointerException

    Solver.moves(Solver.java:229)
    TestSolver.testImmutableSolver(TestSolver.java:492)
    TestSolver.testImmutableSolverUnsolvableBoards(TestSolver.java:585)
    TestSolver.test7b(TestSolver.java:624)
    TestSolver.main(TestSolver.java:994)

    - sequence of Solver operations was:
          Solver solver = new Solver(initial);
          solver.isSolvable() -> false
          solver.moves()
    - failed on trial 1 of 10

==> FAILED

Test 8: Call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  * puzzle00.txt
  * puzzle04.txt
  * puzzle08.txt
  * puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 13b: Call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt

        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
        OperationCountLimitExceededException
        Number of calls to methods in Board exceeds limit: 100000000
        ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

==> FAILED

Test 14a: Call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14b: Call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 15: Call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 14/20 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an n-by-n board

              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           152                  240
=> passed     8           248                  560
=> passed    12           408                 1008
=> passed    16           632                 1584
=> passed    20           920                 2288
=> passed    36          2712                 6384
=> passed    72         10488                23088
=> passed   120         28920                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 2.00 n^2 + 0.00 n + 120.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4576 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.93
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 5720 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.94
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 6320 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.88
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> passed  puzzle20.txt   3     0.02        409                 253                 157
=> passed  puzzle21.txt   3     0.01       1642                1028                 615
=> passed  puzzle22.txt   3     0.01       1141                 711                 431
=> passed  puzzle23.txt   3     0.03       2894                1813                1082
=> passed  puzzle24.txt   3     0.01       1608                1005                 604
=> passed  puzzle25.txt   3     0.05       3555                2236                1320
=> passed  puzzle26.txt   3     0.01       1120                 715                 406
=> passed  puzzle27.txt   3     0.03       2448                1542

...

WARNING: the grading output was truncated due to excessive length.
Typically, this is because you have a method that has an unanticipated side effect
(such as printing to standard output or throwing an exception). A large amount of output
can also arise from failing many tests.

