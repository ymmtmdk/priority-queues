See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  FAILED (0 errors, 4 warnings)
API:          PASSED

Findbugs:     FAILED (11 warnings)
Checkstyle:   FAILED (298 warnings)

Correctness:  37/42 tests passed
Memory:       11/11 tests passed
Timing:       17/17 tests passed

Aggregate score: 87.86%
[Compilation: 5%, API: 5%, Findbugs: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
 17K May 31 07:47 Board.java
9.6K May 31 07:47 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------
Board.java:161: warning: [rawtypes] found raw type: Board.Blocks
  private final Blocks blocks;
                ^
  missing type arguments for generic class Board.Blocks<T>
  where T is a type-variable:
    T extends Object declared in class Board.Blocks
Board.java:167: warning: [rawtypes] found raw type: Board.Blocks
  private static Board newBoard(Blocks blocks, int dimension, int rowOfBlank, int colOfBlank, int hamming, int manhattan, boolean isGoal, long hashCode){
                                ^
  missing type arguments for generic class Board.Blocks<T>
  where T is a type-variable:
    T extends Object declared in class Board.Blocks
Board.java:244: warning: [rawtypes] found raw type: Board.Blocks
  private Board(Blocks blocks, int dimension, int rowOfBlank, int colOfBlank, int hamming, int manhattan, boolean isGoal, long hashCode){
                ^
  missing type arguments for generic class Board.Blocks<T>
  where T is a type-variable:
    T extends Object declared in class Board.Blocks
Board.java:624: warning: [rawtypes] found raw type: Board.Blocks
  private static String blocksString(Blocks blocks){
                                     ^
  missing type arguments for generic class Board.Blocks<T>
  where T is a type-variable:
    T extends Object declared in class Board.Blocks
4 warnings

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L M LI_LAZY_INIT_STATIC LI: Incorrect lazy initialization of static field Board.boardCache in Board.newBoard(Board$Blocks, int, int, int, int, int, boolean, long)  At Board.java:[lines 168-169]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'println()' is never called.  At Board.java:[lines 287-288]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'testBlocks()' is never called.  At Board.java:[lines 25-43]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'testMahattan2()' is never called.  At Board.java:[lines 411-440]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'prevManhattan' but that value is never used.  At Board.java:[line 546]
M D DLS_DEAD_LOCAL_STORE DLS: Assigns a value to the local variable 'nextManhattan' but that value is never used.  At Board.java:[line 549]
M B NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT NP: The 'equals()' method does not return 'false' if the argument is null.  At Solver.java:[lines 229-231]
M B BC_EQUALS_METHOD_SHOULD_WORK_FOR_ALL_OBJECTS BC: The 'equals()' method for 'Solver$BoardNode' assumes the argument is of type 'Solver$BoardNode'; it should be of type 'java.lang.Object'.  At Solver.java:[line 230]
M B HE_EQUALS_USE_HASHCODE HE: The class overrides 'equals()' but not 'hashCode()'. As a result, 'Solver$BoardNode' will not work with 'java.util.HashMap' or 'java.util.HashSet'.  At Solver.java:[lines 229-231]
L D UCF_USELESS_CONTROL_FLOW UCF: Contains a useless control-flow statement, which leads to same result regardless of whether branch is taken.  At Solver.java:[line 200]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'println()' is never called.  At Solver.java:[lines 184-185]
Warnings generated: 11

================================================================


% checkstyle *.java
*-----------------------------------------------------------
Board.java:1: Do not use .* in import statements. [AvoidStarImport]
Board.java:2: Do not use .* in import statements. [AvoidStarImport]
Board.java:5:11: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:5:35: '>' is followed by an illegal character. [GenericWhitespace]
Board.java:5:35: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:6:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:7:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:8:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:9:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:9:24: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
Board.java:10:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:10:32: The local (or parameter) variable 'blocks' has the same name as an instance variable. Use a different name. [HiddenField]
Board.java:11:5: Do not use the keyword 'abstract' in this course. [IllegalToken]
Board.java:13:24: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:15:48: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:16:50: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:24:28: '{' is not preceded with whitespace. [WhitespaceAround]
Board.java:31:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:31:26: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:32:14: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:32:16: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:33:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:33:26: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:34:14: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:34:16: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:35:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:35:26: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:36:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:36:26: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:37:14: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:37:16: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:38:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:38:26: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:39:14: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:39:16: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:40:11: 'assert' is not followed by whitespace. [WhitespaceAround]
Board.java:40:27: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:41:14: ',' is not followed by whitespace. [WhitespaceAfter]
Board.java:41:16: ',' is not followed by whitespace. [WhitespaceAfter]
...
 Checkstyle ends with 298 errors.

================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: Test hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: Test hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: Test manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: Test manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: Test dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
==> passed

Test 4a: Test toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: Test toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: Test neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - neighbor not found by student:
        [suppressed]

  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 5b: Test neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
    - neighbor not found by student:
        3
         1  5  8 
         6  2  7 
         4  0  3 

    - failed on trial 772 of 1000

  * 4-by-4
  * 5-by-5
  * 9-by-9
    - neighbor not found by student:
        9
        61 64 58 71 52 20 80 26 18 
        72 15 67 42 23 60 30 28 59 
        41 57 43 44 75 33 45 34 32 
        63 22 13 17  6 79 19 66 16 
        38 68  3 21 78 35 47  4 46 
        40  1 36 39 49  7 12 69 14 
        70 50 53 74 54 73 51 29 76 
        27 37 62 25 65 10 77 11 55 
         8  9  5 24 56 48  2  0 31 

    - failed on trial 4 of 1000

  * 10-by-10
    - neighbor not found by student:
        [suppressed]

    - failed on trial 3 of 1000

  * 127-by-127
    - neighbor not found by student:
        [suppressed]

    - failed on trial 1 of 10

==> FAILED

Test 6a: Test neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 6 extra entries in student solution, including: 10
 1  2  3  4  5  6  7  8  9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 49 50 
51 52 53 54 55 56 57 58 59 60 
61 62 63 64 65 66 67 68 69 70 
71 72 73 74 75 76 77 78 79 80 
81 82 83 84 85 86 87 88 89  0 
91 92 93 94 95 96 97 98 99 90 

    - 6 missing entries in student solution, including: 10
 1  2  3  4  5  6  7  8  9 10 
11 12 13 14 15 16 17 18 19 20 
21 22 23 24 25 26 27 28 29 30 
31 32 33 34 35 36 37 38 39 40 
41 42 43 44 45 46 47 48 49 50 
51 52 53 54 55 56 57 58 59 60 
61 62 63 64 65 66 67 68 69 70 
71 72 73 74 75 76 77 78 79 80 
81 82 83 84 85 86 87 88 89 90 
91 92 93 94 95 96 97 98 99  0 


  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> FAILED

Test 6b: Test neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
    - student   solution has 6 non-null entries
    - reference solution has 6 non-null entries
    - 2 extra entries in student solution, including: 3
 7  1  5 
 0  6  4 
 3  8  2 

    - 2 missing entries in student solution, including: 3
 1  7  0 
 6  5  4 
 3  8  2 


    - failed on trial 90 of 1000

  * 4-by-4
  * 5-by-5
  * 9-by-9
    - incorrect number of neighbors of neighbors
    - student   neighbors = 12
    - reference neighbors = 10
    - board
        9
        12 67 55 69 34 29  7 75  5 
        11 64 72 52 38  9 54 16 40 
        74 35 37 17 70  1 71  4 26 
        19 15 20 57 10 22 32 56 25 
        23 47 46 79 49 21 80 65 39 
        13 18 51  6 33 61 41 76 43 
        27 58 66 77 30 68  3 45 50 
        36  2 14 60  8 48 73 28 59 
        44 62 42 63 53 31  0 78 24 

    - failed on trial 2 of 1000

  * 10-by-10
    - incorrect number of neighbors of neighbors
    - student   neighbors = 12
    - reference neighbors = 10
    - board
        10
        19 24 98 46 44 89 32 91 21 80 
        62 96 25 35 26 70 49 53 90 34 
        42 41 37 86  6 77 73 94 10  8 
        84  9 63 78 99 82 56 61 13 58 
        39 18 43 27  4 30 79 38 97  5 
        36 15 22 67 45 83 74 59 57 14 
         3 33 40 23 11 55 72 17 51 88 
         7 50 16 66 95  2 65 69 87 52 
        81 47 64 85 75 29 93 71 48 28 
         1 76  0 68 31 54 92 12 60 20 

    - failed on trial 1 of 1000

==> FAILED

Test 7a: Test twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: Test twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: Test isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: Test isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: Check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: Check equals()
  * reflexive
  * symmetric
  * checks that individual entries of array are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: Test equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: Check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: Check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: Call hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: Call manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
    - student   manhattan() = 4
    - reference manhattan() = 2
        2
         3  2 
         1  0 

==> FAILED


Total: 17/22 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 20 total tests.

Test 1: Call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2: Call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 3: Create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 4a: Call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 4b: Call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 5: Call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 6: Call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7a: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 7b: Check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 8: Call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 9: Check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle05.txt
  * puzzle10.txt
  * puzzle15.txt
==> passed

Test 10: Check that constructor throws exception if board is null
==> passed

Test 11: Check for fragile dependence on toString()
  * puzzle00.txt
  * puzzle04.txt
  * puzzle08.txt
  * puzzle12.txt
==> passed

Test 12a: Call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12b: Call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 13a: Call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13b: Call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 14a: Call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14b: Call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 15: Call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 20/20 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Board
*-----------------------------------------------------------
Running 8 total tests.

Memory usage of an n-by-n board

              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     4           104                  240
=> passed     8           256                  560
=> passed    12           416                 1008
=> passed    16           640                 1584
=> passed    20           928                 2288
=> passed    36          2720                 6384
=> passed    72         10496                23088
=> passed   120         28928                61488
==> 8/8 tests passed

Total: 8/8 tests passed!

Student   memory = 0.00 n^3 + 1.63 n^2 + 10.01 n + 49.74   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



Computing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 3736 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.76
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4640 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.77
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4904 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.68
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 17 total tests.

Timing tests use your implementation of Board.java and Solver.java.
Maximum time allowed per puzzle is 10 seconds.

               filename   N    seconds    insert()            delMin()         max PQ size
---------------------------------------------------------------------------------------------
=> passed  puzzle20.txt   3     0.03        531                 318                 214         
=> passed  puzzle21.txt   3     0.01       1162                 692                 471         
=> passed  puzzle22.txt   3     0.00       1035                 620                 416         
=> passed  puzzle23.txt   3     0.01       2533                1491                1043         
=> passed  puzzle24.txt   3     0.00       1133                 690                 445         
=> passed  puzzle25.txt   3     0.02       4372                2616                1757         
=> passed  puzzle26.txt   3     0.01       2525                1494                1032         
=> passed  puzzle27.txt   3     0.01       5662                3429                2234         
=> passed  puzzle28.txt   3     0.01       4872                2962                1911         
=> passed  puzzle29.txt   3     0.01       5231                3116                2116         
=> passed  puzzle30.txt   3     0.00       2714                1623                1092         
=> passed  puzzle31.txt   3     0.03      15617                9392                6226         
=> passed  puzzle34.txt   4     0.30     111423               52931               58493         
=> passed  puzzle37.txt   4     0.12      47657               22371               25287         
=> passed  puzzle39.txt   4     0.09      37609               18192               19418         
=> passed  puzzle41.txt   5     0.09      15111                6449                8663         
=> passed  puzzle44.txt   5     0.13      37098               16682               20417         
==> 17/17 tests passed

Total: 17/17 tests passed!


================================================================




